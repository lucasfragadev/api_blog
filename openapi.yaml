# OpenAPI Specification Version
openapi: 3.0.0

# General information about your API
info:
  title: Blog API
  description: API to manage users and blog posts, with a modular route structure.
  version: 1.0.0
  contact:
    name: Your Name
    email: your.email@example.com

# Servers where the API is available
servers:
  - url: http://localhost:3000/api/v1
    description: Local development server

# Definition of Tags used to group endpoints
tags:
  - name: Authentication
    description: Operations for user registration and login.
  - name: Users
    description: Operations related to user profiles.
  - name: Posts
    description: Operations for creating, reading, updating, and deleting posts.

# Definition of Schemas and Security Schemes
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT authentication token. To authenticate, provide the token in the `Authorization` header with the "Bearer" prefix.
        Example: `Authorization: Bearer <your-jwt-token>`
  schemas:
    User:
      type: object
      description: Representation of a user in the system.
      properties:
        _id: { type: string, example: '65e8c8a8b2c9b4e4b3e8e8a0' }
        name: { type: string, example: 'John Doe' }
        email: { type: string, format: email, example: 'john.doe@example.com' }
        createdAt: { type: string, format: date-time, readOnly: true }
    UserCreate:
      type: object
      description: Data required to register a new user.
      properties:
        name: { type: string, example: 'John Doe' }
        email: { type: string, format: email, example: 'john.doe@example.com' }
        password: { type: string, format: password, example: 'S3nh@F0rt3!', writeOnly: true }
      required: [name, email, password]
    Post:
      type: object
      description: Representation of a post in the system.
      properties:
        _id: { type: string, example: '65e8c9d7b2c9b4e4b3e8e8a4' }
        title: { type: string, example: 'My First Post' }
        content: { type: string, example: 'This is the content...' }
        author: { type: string, example: '65e8c8a8b2c9b4e4b3e8e8a0' }
        createdAt: { type: string, format: date-time, readOnly: true }
    PostCreate:
      type: object
      description: Data required to create or update a post.
      properties:
        title: { type: string, example: 'Post Title' }
        content: { type: string, example: 'Post content...' }
      required: [title, content]
    AuthLogin:
      type: object
      description: Credentials required for login.
      properties:
        email: { type: string, format: email, example: 'john.doe@example.com' }
        password: { type: string, format: password, example: 'S3nh@F0rt3!' }
      required: [email, password]
    AuthToken:
      type: object
      description: Authentication token returned after login.
      properties:
        token: { type: string, example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' }
    Error:
      type: object
      description: Standard structure for error messages.
      properties:
        message: { type: string, example: 'Descriptive error message.' }

# Definition of all API endpoints
paths:
  #--- Authentication Routes ---
  /api/v1/auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Creates a new user account in the system. This route is public.
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/UserCreate' } }
      responses:
        '201': { description: 'User successfully created', content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { description: 'Invalid input data', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '409': { description: 'Email already registered', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/v1/auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate a user
      description: Authenticates with email and password, returning a JWT token. This route is public.
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AuthLogin' } }
      responses:
        '200': { description: 'Successful authentication', content: { application/json: { schema: { $ref: '#/components/schemas/AuthToken' } } } }
        '400': { description: 'Email and password are required', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: 'Invalid credentials', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  #--- User Routes ---
  /api/v1/users/me:
    get:
      tags: [Users]
      summary: Get the logged-in user's profile
      description: Returns the information of the authenticated user. Requires authentication token.
      security:
        - BearerAuth: []
      responses:
        '200': { description: 'User profile returned', content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: 'Unauthorized. Invalid or missing token', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  #--- Post Routes ---
  /api/v1/posts:
    get:
      tags: [Posts]
      summary: List all posts
      description: Returns a list of all public posts in the system. This route is public.
      responses:
        '200': { description: 'Post list successfully returned', content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Post' } } } } }
        '500': { description: 'Unexpected server error', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    post:
      tags: [Posts]
      summary: Create a new post
      description: Creates a new post associated with the authenticated user. Requires authentication token.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PostCreate' } }
      responses:
        '201': { description: 'Post successfully created', content: { application/json: { schema: { $ref: '#/components/schemas/Post' } } } }
        '400': { description: 'Invalid input data', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: 'Unauthorized', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/v1/posts/{id}:
    get:
      tags: [Posts]
      summary: Fetch a post by ID
      description: Returns the details of a specific post. This route is public.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to fetch.
          schema: { type: string }
      responses:
        '200': { description: 'Post found', content: { application/json: { schema: { $ref: '#/components/schemas/Post' } } } }
        '404': { description: 'Post not found', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    put:
      tags: [Posts]
      summary: Update an existing post
      description: Updates a post. The user can only update their own posts. Requires authentication token.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to update.
          schema: { type: string }
      requestBody:
        content:
          application/json: { schema: { $ref: '#/components/schemas/PostCreate' } }
      responses:
        '200': { description: 'Post successfully updated', content: { application/json: { schema: { $ref: '#/components/schemas/Post' } } } }
        '401': { description: 'Unauthorized', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: 'Action not authorized (user is not the author)', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: 'Post not found', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    delete:
      tags: [Posts]
      summary: Delete a post
      description: Deletes an existing post. The user can only delete their own posts. Requires authentication token.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the post to delete.
          schema: { type: string }
      responses:
        '204': { description: 'Post successfully deleted' }
        '401': { description: 'Unauthorized', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: 'Action not authorized (user is not the author)', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: 'Post not found', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }